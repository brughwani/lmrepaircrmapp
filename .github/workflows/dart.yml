
on:
  push:
    branches:
      - main  # Change to your production branch (e.g., master, production)
    paths:
      - '**'  # Watch all files

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter with built-in caching
        uses: subosito/flutter-action@v2
        id: flutter-setup # Added this ID to reference the action's outputs
        with:
          channel: 'stable'
          cache: false
          cache-key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}



      - name: Cache pub packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('pubspec.lock') }}

      #          cache-path: |
      #            ~/.pub-cache,.dart_tool,/opt/hostedtoolcache/flutter

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a recent LTS version
      #
      #      # This step finds the Flutter SDK and adds it to the PATH
      #      - name: Find and Add Flutter to PATH
      #        run: |
      #       # Find the Flutter directory and add it to the GITHUB_PATH
      #          echo "$(find / -name "flutter" -type d -print -quit)/bin" >> $GITHUB_PATH

      - name: Verify Node and NPM installation
        run: |
          node -v
          npm -v
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Verify Dart and Flutter
        run: |
          echo "Flutter version: $(flutter --version)"
          echo "Dart version: $(dart --version)"

      # Install Flutter dependencies only once
      - name: Install Flutter dependencies
        run: flutter pub get

      # Install Firebase CLI globally using npm
      - name: Install Firebase Tools
        run: |
          npm install -g firebase-tools
      # Use a new step to update & verify the flutterfire_cli version
      # New step to deactivate the old version and activate the latest
      # New step to deactivate the old version and activate the latest
      # Manually download and install flutterfire_cli to bypass pub issues
      # Manually download and install flutterfire_cli to bypass pub issues
      #      - name: Activate FlutterFire CLI
      #        run: dart pub global activate flutterfire_cli
      #      - name: Authenticate Firebase CLI
      #        run: firebase login:ci --token ${{ secrets.FIREBASE_TOKEN }}
      #
      #
      #      - name: Generate Firebase Options Securely
      #        run: |
      #          flutter clean
      #          flutter pub global activate flutterfire_cli
      #          flutterfire configure \
      #            --project=${{ secrets.FIREBASE_PROJECT_ID }} \
      #            --platforms=web \
      #            --out=lib/firebase_options.dart --yes
      ##          cat > firebase_config.json <<EOF
      ##          {
      ##           "projectId": "${{ secrets.FIREBASE_PROJECT_ID }}",
      ##           "appId": "${{ secrets.FIREBASE_APP_ID }}",
      ##           "apiKey": "${{ secrets.FIREBASE_API_KEY }}",
      ##           "authDomain": "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
      ##           "storageBucket": "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
      ##           "measurementId": "${{ secrets.FIREBASE_MEASUREMENT_ID }}",
      ##           "messagingSenderId": "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}"
      ##          }
      ##          EOF
      ##
      ##          echo "${{ secrets.FIREBASE_APP_ID }}"
      ##          echo "${{ secrets.FIREBASE_PROJECT_ID }}"
      ##
      ##          flutter pub global run flutterfire_cli:flutterfire configure \
      ##            --project=limsoncrm \
      ##            --platforms=web \
      ##            --out=lib/firebase_options.dart \
      ##            --yes \
      #
      #
      # #         rm firebase_config.json
      #        env:
      #          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_LIMSONCRM }}

      - name: Build web release
        run:
          |
                    flutter build web --release --pwa-strategy=none

      - name: ðŸŽ¯ Deploy to firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_LMSUPPORTAGENT }}"
          channelId: live
          target: lmsupportagent
          projectId: "${{ secrets.FIREBASE_PROJECT_ID }}"

  #      - name: Deploy to Firebase production
  #        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #        run:
  #          |
  #          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_LIMSONCRM }}' > service_account.json
  #          export GOOGLE_APPLICATION_CREDENTIALS="service_account.json"
  #          firebase hosting:sites:list --project limsoncrm
  #          npx firebase-tools deploy --only hosting --project limsoncrm --non-interactive
  #          rm -f service_account.json
  #
  #

  #         firebase deploy --only hosting:limsoncrm --project limsoncrm



      # want to change this to 'flutter test'.
      - name: Run tests
        run: dart test
